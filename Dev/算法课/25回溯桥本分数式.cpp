//思考1：桥本分数式
//日本数学家桥本吉彦教授于1993年10月在我国山东举行的中日美三国数学教育研讨会上提出以下填数趣题：把1,2,…,9这9个数字填入下式的9个方格中(数字不得重复)，使下面分数等式成立:
//      □     □     □
//     ── + ── = ──
//     □□   □□   □□
#include <stdio.h>

// 全局变量，用于存储数字排列以及解的数量
static int a[10], s;
// 用于存储分母的三个两位数
long m1, m2, m3;

// 检查当前数字排列是否合法（是否有重复数字）
int Legal(int k) {
    for (int j = 1; j < k; j++) {
        if (a[j] == a[k]) {
            return 0;  // 如果有重复数字，返回0表示不合法
        }
    }
    return 1;  // 没有重复数字，返回1表示合法
}

// 回溯函数，用于生成所有可能的数字排列
void Backtrack(int t) {
    if (t == 10) {  // 当t为10时，说明9个数字都已经填充完毕
        // 计算三个分母的两位数
        m1 = a[2] * 10 + a[3];
        m2 = a[5] * 10 + a[6];
        m3 = a[8] * 10 + a[9];
        // 判断分数等式是否成立，并且a[1] < a[4]（避免重复解，因为分数交换分子顺序是相同的解）
        if ((a[1] * m2 * m3 + a[4] * m1 * m3 == a[7] * m1 * m2) && (a[1] < a[4])) {
            s++;  // 解的数量加1
            printf("%2d: ", s);
            // 输出满足条件的分数等式
            printf("%d/%d%d+%d/%d%d=%d/%d%d\n", a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]);
        }
    } else {
        // 尝试1到9的每个数字填充到当前位置t
        for (int i = 1; i <= 9; i++) {
            a[t] = i;
            if (Legal(t)) {  // 如果当前填充的数字排列合法
                Backtrack(t + 1);  // 继续填充下一个位置
            }
        }
    }
}

//void Backtrack(int t)
//{
//	if(t == 10){
//		m1 = a[2] * 10 + a[3];
//		m2 = a[5] * 10 + a[6];
//		m3 = a[8] * 10 + a[9];
//		if(a[1] * m2 * m3 + a[4] * m1 * m3 == a[7] * m1 * m2 && (a[1] < a[4])){
//			s++;
//			printf("%2d: ", s);
//		}
//	}else{
//		for(int i = 1; i <= 9; i++)
//		{
//			a[t] = i;
//			if(Legal(t)){
//				Backtrack(t + 1);
//			}
//		}
//	}
//}
int main() {
    Backtrack(1);  // 从第一个位置开始进行回溯搜索
    return 0;  // 程序正常结束
}

